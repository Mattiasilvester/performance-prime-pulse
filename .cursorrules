# Cursor Rules per Performance Prime Pulse

## Contesto del Progetto
Questo Ã¨ un'applicazione React/TypeScript con Capacitor per il fitness e il benessere. Include funzionalitÃ  di AI coach, tracking dei workout, pianificazione e integrazione con Supabase. 

**Stato Attuale (31 Luglio 2025)**: 
- âœ… **MVP corretto e funzionante** con server attivo su `http://localhost:8080/`
- âœ… **Link pubblico:** `https://performanceprime.it`
- âœ… **Architettura semplificata** - eliminata landing page complessa
- âœ… **Flusso diretto:** `/` â†’ `/auth` â†’ `/app`
- âœ… **Autenticazione Supabase** funzionante
- âœ… **Dashboard protetta** e responsive
- âœ… **Overlay corretto** - Funzioni premium bloccate con design coerente

## Tecnologie Principali
- React 18+ con TypeScript
- Capacitor per app mobile (iOS/Android)
- Supabase per backend e autenticazione
- Tailwind CSS per styling
- Shadcn/ui per componenti UI
- Vite come build tool

## Convenzioni di Codice
- Usa TypeScript strict mode
- Preferisci functional components con hooks
- Usa named exports invece di default exports
- Segui la convenzione camelCase per variabili e funzioni
- Usa PascalCase per componenti React
- Mantieni i componenti piccoli e focalizzati

## Struttura del Progetto
- `/src/components/` - Componenti riutilizzabili
- `/src/public/pages/` - Pagine MVP (senza landing)
- `/src/public/components/` - Componenti MVP
- `/src/shared/` - Codice condiviso (config, hooks, ui, integrations)
- `/src/App.tsx` - Entry point semplificato
- `/src/main.tsx` - Bootstrap app

## Styling
- Usa Tailwind CSS per lo styling
- Preferisci componenti Shadcn/ui quando disponibili
- Mantieni la coerenza con il design system esistente
- Usa variabili CSS per colori e spacing

## Database e API
- Usa Supabase per tutte le operazioni di database
- Implementa proper error handling per le API calls
- Usa TypeScript types per i dati del database
- Segui le convenzioni di naming di Supabase

## Mobile (Capacitor)
- Considera sempre la compatibilitÃ  mobile
- Usa responsive design
- Testa su dispositivi reali quando possibile
- Gestisci correttamente le API native di Capacitor

## AI e Machine Learning
- Implementa funzionalitÃ  AI in modo sicuro
- Valida sempre gli input dell'utente
- Fornisci feedback chiaro per le operazioni AI
- Mantieni la privacy dell'utente

## Performance
- Ottimizza il bundle size
- Usa lazy loading per i componenti pesanti
- Implementa caching appropriato
- Monitora le performance su dispositivi mobili

## Sicurezza
- Valida sempre gli input dell'utente
- Usa HTTPS per tutte le comunicazioni
- Implementa proper authentication
- Proteggi i dati sensibili

## Testing
- Scrivi test per le funzionalitÃ  critiche
- Usa React Testing Library per i test dei componenti
- Testa le integrazioni con Supabase
- Verifica la compatibilitÃ  mobile

## Documentazione
- Commenta il codice complesso
- Mantieni README aggiornato
- Documenta le API custom
- Fornisci esempi di utilizzo

## Quando Suggerisci Modifiche
- Mantieni la coerenza con il codice esistente
- Considera l'impatto sulle performance
- Verifica la compatibilitÃ  mobile
- Assicurati che le modifiche seguano le convenzioni del progetto
- Testa sempre il server di sviluppo (porta 8080)
- Verifica che il flusso `/` â†’ `/auth` â†’ `/app` funzioni correttamente
- Mantieni aggiornata la documentazione

## Problemi Risolti Recentemente (31 Luglio 2025)
- âœ… **Overlay corretto** - Implementato overlay individuale su funzioni premium
- âœ… **Header e Footer** - Layout completo con navigazione
- âœ… **Menu dropdown** - Termini e Condizioni + GDPR
- âœ… **Design coerente** - Tema scuro con accenti oro
- âœ… **Errori import `@/lib/config`** - Risolti aggiornando import a `@/shared/config/environments`
- âœ… **Errori `_jsxDEV is not a function`** - Risolti pulendo cache Vite e semplificando App.tsx
- âœ… **Landing page problematica** - Eliminata completamente per semplificare architettura
- âœ… **Cache Vite obsoleta** - Pulita con `rm -rf node_modules/.vite dist`

## Architettura Attuale
- **Flusso semplificato:** `/` â†’ redirect a `/auth` â†’ `/app`
- **Componenti diretti:** Import diretti in `src/App.tsx`
- **Routing ottimizzato:** Solo route essenziali
- **Layout completo:** Header + Main Content + Navigation Footer
- **Overlay corretto:** Funzioni premium bloccate con design coerente

## Server e Development
- **Server attivo:** `http://localhost:8080/`
- **Link pubblico:** `https://performanceprime.it`
- **Comando:** `npm run dev`
- **Cache:** Pulita automaticamente
- **Hot reload:** Funzionante

## Prossimi Sviluppi
- ðŸ”„ **Landing page** per app completa
- ðŸ”„ **Subdomain separato** per sviluppo
- ðŸ”„ **Testing completo** su entrambi gli ambienti
- ðŸ”„ **Deploy produzione** su Lovable 